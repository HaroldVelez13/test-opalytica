{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/harold/Projects/opalytica/frontend/components/organisms/OrderForm.jsx\";\nimport { useForm } from \"react-hook-form\";\nimport { Button, Form, FormGroup, Label, Input, Card } from \"reactstrap\";\nexport default function OrderForm() {\n  const {\n    register,\n    errors,\n    handleSubmit\n  } = useForm();\n\n  const onSubmit = dataForm => {\n    fetch('../php/contact.php', {\n      method: 'POST',\n      body: dataForm\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n\n      window.history.back();\n    }).catch(console.error);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    body: true,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"company\",\n          children: \"Company\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"company\",\n          ref: register({\n            required: true\n          }),\n          placeholder: \"Company Name\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), errors.company && /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-danger\",\n          children: \"The field Company is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"quantity\",\n          children: \"Quantity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"quantity\",\n          type: \"number\",\n          ref: register({\n            required: true\n          }),\n          placeholder: \"Quantity\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), errors.quantity && /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-danger\",\n          children: \"The field Quantity is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          size: \"lg\",\n          block: true,\n          className: \"mt-4\",\n          type: \"submit\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/harold/Projects/opalytica/frontend/components/organisms/OrderForm.jsx"],"names":["useForm","Button","Form","FormGroup","Label","Input","Card","OrderForm","register","errors","handleSubmit","onSubmit","dataForm","fetch","method","body","then","response","ok","Error","window","history","back","catch","console","error","required","company","quantity"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,iBAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,IAAhD,QAA4D,YAA5D;AAEA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,MAAqCV,OAAO,EAAlD;;AACA,QAAMW,QAAQ,GAAIC,QAAD,IAAc;AAC7BC,IAAAA,KAAK,CAAC,oBAAD,EAAuB;AACxBC,MAAAA,MAAM,EAAE,MADgB;AAExBC,MAAAA,IAAI,EAAEH;AAFkB,KAAvB,CAAL,CAGKI,IAHL,CAGUC,QAAQ,IAAI;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACDC,MAAAA,MAAM,CAACC,OAAP,CAAeC,IAAf;AACD,KARH,EAQKC,KARL,CAQWC,OAAO,CAACC,KARnB;AASD,GAVD;;AAYA,sBACE,QAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEf,YAAY,CAACC,QAAD,CAA5B;AAAA,8BACE,QAAC,SAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,GAAG,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,SADP;AAEE,UAAA,GAAG,EAAEH,QAAQ,CAAC;AAAEkB,YAAAA,QAAQ,EAAE;AAAZ,WAAD,CAFf;AAGE,UAAA,WAAW,EAAC,cAHd;AAIE,UAAA,SAAS,EAAC;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAFF,EAQGjB,MAAM,CAACkB,OAAP,iBACC;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAaE,QAAC,SAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,GAAG,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,GAAG,EAAEnB,QAAQ,CAAC;AAAEkB,YAAAA,QAAQ,EAAE;AAAZ,WAAD,CAHf;AAIE,UAAA,WAAW,EAAC,UAJd;AAKE,UAAA,SAAS,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,gBAFF,EASGjB,MAAM,CAACmB,QAAP,iBACC;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,eA0BE,QAAC,SAAD;AAAA,mBACG,GADH,eAEE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,IAAI,EAAC,IAA7B;AAAkC,UAAA,KAAK,MAAvC;AAAwC,UAAA,SAAS,EAAC,MAAlD;AAAyD,UAAA,IAAI,EAAC,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD","sourcesContent":["import { useForm } from \"react-hook-form\";\nimport { Button, Form, FormGroup, Label, Input, Card } from \"reactstrap\";\n\nexport default function OrderForm() {\n  const { register, errors, handleSubmit } = useForm();\n  const onSubmit = (dataForm) => {\n    fetch('../php/contact.php', {\n        method: 'POST',\n        body: dataForm,\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok.')\n        }\n        window.history.back()\n      }).catch(console.error)\n  };\n\n  return (\n    <Card body>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup>\n          <Label for=\"company\">Company</Label>\n          <input\n            name=\"company\"\n            ref={register({ required: true })}\n            placeholder=\"Company Name\"\n            className=\"form-control\"\n          />\n          {errors.company && (\n            <small className=\"text-danger\">The field Company is required</small>\n          )}\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"quantity\">Quantity</Label>\n          <input\n            name=\"quantity\"\n            type=\"number\"\n            ref={register({ required: true })}\n            placeholder=\"Quantity\"\n            className=\"form-control\"\n          />\n          {errors.quantity && (\n            <small className=\"text-danger\">The field Quantity is required</small>\n          )}\n        </FormGroup>\n        <FormGroup>\n          {\" \"}\n          <Button color=\"primary\" size=\"lg\" block className=\"mt-4\" type=\"submit\">\n            Create\n          </Button>\n        </FormGroup>\n      </form>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}